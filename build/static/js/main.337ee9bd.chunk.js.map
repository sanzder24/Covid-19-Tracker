{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","total","isRed","active","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.337ee9bd.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\nimport './InfoBox.css';\r\n\r\nfunction InfoBox({ title, cases, total, isRed, active, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick}\r\n            className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`} >\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox","import React from \"react\";\r\nimport numeral from \"numeral\"; // to format numbers in a certain way\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        rgb: \"rgb(204, 16, 52)\",\r\n        half_op: \"rgba(204, 16, 52, 0.5)\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        rgb: \"rgb(125, 215, 29)\",\r\n        half_op: \"rgba(125, 215, 29, 0.5)\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        rgb: \"rgb(251, 68, 67)\",\r\n        half_op: \"rgba(251, 68, 67, 0.5)\",\r\n        multiplier: 2000,\r\n    },\r\n}\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n\r\n}\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n// Draw circle on the Map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType = 'cases') => (\r\n    data.map(country => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n        >\r\n            <Popup>\r\n                \r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    />\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">\r\n                        Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">\r\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">\r\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n)","import React from 'react'\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\"\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n            <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport \"./Table.css\";\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n          {countries.map(({country, cases}) => (\r\n          <tr>\r\n            <td>{country}</td>\r\n            <td><strong>{cases}</strong></td>\r\n          </tr>\r\n\r\n          ))}  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Line} from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: true,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\"\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\nconst buildChartData = (data, casesType) =>{\r\n    const chartData =[];\r\n    let lastDataPoint;\r\n   for (let date in data.cases){\r\n        if(lastDataPoint){\r\n            const newDataPoint ={\r\n                x: date,\r\n                y: data[casesType][date]- lastDataPoint\r\n            };\r\n            chartData.push(newDataPoint);\r\n           \r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    };\r\n    return chartData;\r\n };\r\n\r\n\r\nfunction LineGraph({casesType=\"cases\", ...props}) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async()=> {\r\n       fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n       .then(response => response.json())\r\n       .then((data) => {\r\n           let chartData= buildChartData(data, casesType);\r\n           setData(chartData);\r\n       });\r\n   };\r\n   fetchData();\r\n\r\n   }, [casesType]);\r\n    \r\n   \r\n\r\n    return (\r\n        <div>\r\n            <h1></h1>\r\n            {data?.length > 0 && (\r\n            <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                />\r\n              )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport { Card, CardContent } from '@material-ui/core'\nimport {\n  MenuItem,\n  FormControl,\n  Select\n} from '@material-ui/core';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { prettyPrintStat, sortData } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n\n  useEffect(() => {\n    // this code runs only once when the component loads\n    // or if the data in a variable inside here changes\n    // async -> send request, wait for info, then do something with that info\n\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2,\n            }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        })\n    };\n    getCountriesData();\n  }, [])\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url = countryCode === 'worldwide'\n      ? 'https://disease.sh/v3/covid-19/all'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        if (countryCode === 'worldwide') {\n          setMapCenter(mapCenter);\n          setMapZoom(mapZoom);\n        } else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n        };\n      });\n  };\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER by Hussain M.</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === 'cases'}\n            onClick={(e) => setCasesType('cases')}\n            title=\"CoronaVirus Cases\"\n            total={prettyPrintStat(countryInfo.cases)}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n          />\n\n          <InfoBox\n            active={casesType === 'recovered'}\n            onClick={(e) => setCasesType('recovered')}\n            title=\"Recoverd\"\n            total={prettyPrintStat(countryInfo.recovered)}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n          />\n\n          <InfoBox\n            isRed\n            active={casesType === 'deaths'}\n            onClick={(e) => setCasesType('deaths')}\n            title=\"Deaths\"\n            total={prettyPrintStat(countryInfo.deaths)}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases By Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">World Wide {casesType}</h3>\n          <LineGraph casesType={casesType} className=\"app__graph\" />\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}